#!/usr/bin/python
#
# Copyright 2013 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Command Line interface for python interop tests

Called using a JSON argument that contains all parameters.

Operations each contain a test and generate function that will be called
when an operation is specified in the JSON

There is also a create function that will create keys with the flags passed
in.

@author: dlundberg@google.com (Devin Lundberg)
"""
import base64
import json
import os
import sys

from keyczar import errors
from keyczar import keyczar
from keyczar import keyczart
from keyczar import util


class BaseOperation(object):
  """
  Base class for all operations. An operation is a basic
  functionality of keyczar such as encrypting or signing
  that can be verified. All operations have a Generate
  function that will generate output that can tested using
  the Test function.
  """
  TESTDATA = "This is some test data."

  def __init__(self, key_path):
    """
    Sets params for the generate and test function

    generate_params is a list of dictionaries where each
    key, value pair is a name and value to pass to the
    Generate function that can be replaced by any other value
    in that same dictionary. The name is used for file names
    and must be consistant between versions.

    test_params is similar to generate_params, but they
    represent different options that can be presented to
    the Test function.
    """
    self.key_path = key_path
    self.generate_params = [{
        "unencoded": None,
        "encoded": util.Base64WSEncode
        }]
    self.test_params = []

  def Generate(self, algorithm, *options):
    """
    Generates output that will later be saved to file and
    tested using the test function in this and other
    implementations of keyczar. An example is the encrypt
    operation which will return the ciphertext.

    @param algorithm: name of key algorithm with size
    @type algorithm: string

    @param *options: additional parameters listed in children

    @raise NotImplementedError: If the child class does not implement
    """
    raise NotImplementedError()

  def Test(self, output, algorithm, chosen_params, *test_options):
    """
    Will return without error if the input is valid.

    Will verify that the data generated by Generate
    works correctly. For example in the case of the encrypt
    operation this will decrypt the ciphertext and check if
    the value is equal to what was input as plaintext.

    @param output: the output from the Generate function
    @type output: string

    @param algorithm: name of key algorithm with size
    @type algorithm: string

    @param chosen_params: list of option names chosen for generate
    @type chosen_params: list of strings

    @param *test_options: additional parameters listed in children

    @raise AssertionError: If the test fails
    @raise NotImplementedError: If the child class does not implement
    """
    raise NotImplementedError()

  def _GetKeyPath(self, algorithm):
    return os.path.join(self.key_path, algorithm)


class UnversionedSignOperation(BaseOperation):
  """ Operation that tests unversioned signing. """

  def __init__(self, *args):
    super(UnversionedSignOperation, self).__init__(*args)
    self.test_params.append({
        "verifier": keyczar.UnversionedVerifier,
        "signer": keyczar.UnversionedSigner
        })

  def Generate(self, algorithm, encoder):
    signer = keyczar.UnversionedSigner.Read(self._GetKeyPath(algorithm))
    signature = signer.Sign(self.TESTDATA, encoder)
    return signature

  def Test(self, signature, algorithm, generate_params, verifier_class):
    decoder = util.Base64WSDecode if "encoded" in generate_params else None
    verifier = verifier_class.Read(self._GetKeyPath(algorithm))
    assert verifier.Verify(self.TESTDATA, signature, decoder=decoder)


class SignedSessionOperation(BaseOperation):
  """ Operation that tests Signed Sessions """

  def __init__(self, *args):
    super(SignedSessionOperation, self).__init__(*args)
    self.generate_params = []
    signers = [
        "rsa-sign1024",
        "rsa-sign2048",
        "rsa-sign4096",
        "dsa1024",
        "hmac256"
        ]
    self.generate_params.append(dict([(signer, signer) for signer in signers]))

  def Generate(self, crypter_algorithm, signer_algorithm):
    signer = keyczar.Signer.Read(self._GetKeyPath(signer_algorithm))
    key_encrypter = keyczar.Encrypter.Read(
        self._GetKeyPath(crypter_algorithm))
    crypter = keyczar.SignedSessionEncrypter(key_encrypter, signer)
    encrypted_data = crypter.Encrypt(self.TESTDATA)

    # save session material to a seperate file
    session_material = crypter.session_material
    output = {
        "output": encrypted_data,
        "sessionMaterial": session_material
        }

    return json.dumps(output)

  def Test(self, output, algorithm, generate_params):
    output = json.loads(output)
    encrypted_data = output["output"]
    session_material = output["sessionMaterial"]
    signer_algorithm = generate_params[0]
    verifier = keyczar.Verifier.Read(self._GetKeyPath(signer_algorithm))
    key_crypter = keyczar.Crypter.Read(self._GetKeyPath(algorithm))
    session_decrypter = keyczar.SignedSessionDecrypter(
        key_crypter, verifier, session_material)
    decrypted_data = session_decrypter.Decrypt(encrypted_data)
    assert decrypted_data == self.TESTDATA


class AttachedSignOperation(BaseOperation):
  """ Operation that tests attached signing. """

  def __init__(self, *args):
    super(AttachedSignOperation, self).__init__(*args)
    self.test_params.append({
        "verifier": keyczar.Verifier,
        "signer": keyczar.Signer
        })

  def Generate(self, algorithm, encoder):
    signer = keyczar.Signer.Read(self._GetKeyPath(algorithm))
    signature = signer.AttachedSign(self.TESTDATA, "", encoder)
    return signature

  def Test(self, signature, algorithm, generate_params, verifier_class):
    decoder = util.Base64WSDecode if "encoded" in generate_params else None
    verifier = verifier_class.Read(self._GetKeyPath(algorithm))
    assert verifier.AttachedVerify(signature, "", decoder=decoder)


class SignOperation(BaseOperation):
  """ Operation that tests signing. """

  def __init__(self, *args):
    super(SignOperation, self).__init__(*args)
    self.test_params.append({
        "verifier": keyczar.Verifier,
        "signer": keyczar.Signer
        })

  def Generate(self, algorithm, encoder):
    signer = keyczar.Signer.Read(self._GetKeyPath(algorithm))
    signature = signer.Sign(self.TESTDATA, encoder)
    return signature

  def Test(self, signature, algorithm, generate_params, verifier_class):
    decoder = util.Base64WSDecode if "encoded" in generate_params else None
    verifier = verifier_class.Read(self._GetKeyPath(algorithm))
    assert verifier.Verify(self.TESTDATA, signature, decoder=decoder)


class EncryptOperation(BaseOperation):
  """ Operation that tests encryption. """

  def __init__(self, *args):
    super(EncryptOperation, self).__init__(*args)
    self.generate_params.append({
        "crypter": keyczar.Crypter,
        "encrypter": keyczar.Encrypter
        })

  def Generate(self, algorithm, encoder, crypter_class):
    crypter = crypter_class.Read(self._GetKeyPath(algorithm))
    ciphertext = crypter.Encrypt(self.TESTDATA, encoder)
    return ciphertext

  def Test(self, ciphertext, algorithm, generate_params):
    decoder = util.Base64WSDecode if "encoded" in generate_params else None
    crypter = keyczar.Crypter.Read(self._GetKeyPath(algorithm))
    assert crypter.Decrypt(ciphertext, decoder=decoder) == self.TESTDATA

operations = {
    "unversioned": UnversionedSignOperation,
    "attached": AttachedSignOperation,
    "sign": SignOperation,
    "encrypt": EncryptOperation,
    "signedSession": SignedSessionOperation
    }

CREATE = "create"
GENERATE = "generate"
TEST = "test"


def Create(create_flags, add_key_flags):
  create = ["create"]
  keyczart.main(create + create_flags)
  addkey = ["addkey", "--status=primary"]
  keyczart.main(addkey + add_key_flags)


def Generate(operation_name, key_path, algorithm, generate_option_names):
  operation = operations[operation_name]
  current_operation = operation(key_path)
  generate_options = [option_dict[option_name] for option_name, option_dict in
                      zip(generate_option_names,
                          current_operation.generate_params)]
  output = current_operation.Generate(algorithm, *generate_options)
  print output


def Test(operation_name, b64_output, key_path,
         algorithm, generate_options, test_option_names):
  output = base64.b64decode(b64_output)
  operation = operations[operation_name]
  current_operation = operation(key_path)
  test_options = [option_dict[option_name] for option_name, option_dict in
                  zip(test_option_names, current_operation.test_params)]
  current_operation.Test(output, algorithm, generate_options, *test_options)
  print "Test passes"


def Usage():
  raise errors.KeyczarError(
      "Interop tests take a single JSON string describing the parameters\n\n"
      "The format of the JSON is as follows:\n"
      "{\n"
      "  \"command\" : (\"create\"|\"generate\"|\"test\"),\n"
      "  ... any command specific arguments ...\n"
      "}\n"
      )


def main(argv):
  if len(argv) > 2 or not argv:
    Usage()
  else:
    args = json.loads(argv[0])
    if "command" not in args:
      Usage()
    else:
      cmd = args["command"]
      if cmd == CREATE:
        Create(args["createFlags"], args["addKeyFlags"])
      elif cmd == GENERATE:
        Generate(args["operation"], args["keyPath"],
                 args["algorithm"], args["generateOptions"])
      elif cmd == TEST:
        Test(args["operation"], args["b64Output"], args["keyPath"],
             args["algorithm"], args["generateOptions"], args["testOptions"])
      else:
        Usage()

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))  # sys.argv[0] is name of program

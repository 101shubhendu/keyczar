= Stub C++ implementation of Keyczar =


This implementation offers the same functionalities than the Java (excepted
ECDSA) and Python implementations.


== Dependancies ==

- Install the following libraries:
  - OpenSSL: package libssl-dev (Debian/Ubuntu)
  - Unicode icu: packages libicu-dev and libicu38
  - [optional] Swig: package swig


== Build ==

Currently this implementation only works under Linux, follow these for
compiling it:

1- Install the packages mentioned in the previous section.

2- Compilation:
$ cd cpp/src/
$ export SCONS_DIR="`pwd`/tools/scons/scons-local-1.2.0.d20090223/"
$ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux

Unittests are executed and libraries and executables are copied under:
scons-out/opt-linux/

3- Execute keyczart like this:
$ scons-out/opt-linux/staging/keyczart create --location=/tmp/k1 --purpose=crypt
$ scons-out/opt-linux/staging/keyczart addkey --location=/tmp/k1

4- See how to use this lib: read and execute a basic example
   (src/keyczar/basic_example.cc):
$ scons-out/opt-linux/staging/basic_example /tmp/k1


== Python interface ==

There is an experimental Python interface developped with Swig, for compiling
it follow these steps:

1- Install Swig 1.3: package swig

2- Compile source code with option --swig, like e.g.:
$ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux --swig

3- It outputs the corresponding dynamic library _keyczar.so and the Python file
   keyczar.py under scons-out/opt-linux/lib/

4- Then this code should work from the Python interpreter (under
   scons-out/opt-linux/lib/):
     >>> import keyczar
     # '/tmp/k1' is an AES key set
     >>> crypter = keyczar.Crypter.Read("/tmp/k1")
     # '/tmp/k2' is an encrypted AES key set
     >>> reader = keyczar.KeysetEncryptedFileReader("/tmp/k2", crypter)
     >>> encrypter = keyczar.Encrypter.Read(reader)
     >>> encrypter.Encrypt("Secret message")
     'AHAZYMg5XL7wtoDdVkmih5iIKsbQmJV8Jyea7kKcZPm41xCzId5CrGJPtaNPBCKbVpWlCDDG0sRo'
     >>>


== Source tree ==

src/
  base/             -> Third party code mostly derived from Chromium
  keyczar/          -> Keyczar C++ implementation
  scons-out/        -> Build
  testing/          -> Testing framework (gtest)
  tools/            -> Building tools SCons and swtoolkit
  main.scons        -> Entry script


== Current limitations ==

- This implementation has only been compiled and tested under Linux. The
  components and tools used should be compatible with other platforms. However,
  there is a lot of work to do, especially using OpenSSL on Windows doesnt seems
  the best choice. It would rather be more judicious to use the MS CryptoAPI by
  adding to this code a new concrete crypto implementation. In this perspective
  the current code is able (at least in theory) to support easily different
  crypto implementations.
- There is no 'make install' mechanism.
- Numerous unittests are implemented but keyczart is not currently extensively
  tested.


== Compliance with the specifications of Keyczar ==

- Strictly follows these specifications: http://code.google.com/p/keyczar/w/
- Added a new attribute 'nextKeyVersionNumber' in the metadata to keep the
  count of the next key version number to use when a new key is generated. Key
  sets without this attribute are fully supported and are updated transparently
  with this attribute. Exported public keys are emitted without this field (this
  is indeed useless for them).


== This implementation relies on those projects ==

- C++ Style Guide: http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml
- Chromium: http://src.chromium.org/viewvc/chrome/branches/chrome_official_branch/src/base/
- Dtoa: http://www.netlib.org/fp/
- gtest: http://code.google.com/p/googletest/
- Keyczar: http://code.google.com/p/keyczar/
- OpenSSL: http://www.openssl.org/docs/crypto/crypto.html
- SCons: http://www.scons.org/
- Stringencoders: http://code.google.com/p/stringencoders/
- Swig: http://www.swig.org/
- Swtoolkit: http://code.google.com/p/swtoolkit/


Credit to all the authors of those projects and to the originals authors of
Keyczar.

= C++ implementation =


== Dependancies ==

- OpenSSL: package libssl-dev (Debian/Ubuntu)
- Unicode icu: packages libicu-dev and libicu38
- [Optional]: Python and Swig


== Local build ==

Currently this implementation only works under Linux, follow these steps to
compile it:

1- Install the required packages mentioned in the previous section.

2- Compilation:
   $ cd cpp/src/
   $ export SCONS_DIR="`pwd`/tools/scons/scons-local-1.2.0.d20090223/"
   $ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux

3- If you also want to compile the Python interface, be sure that Swig is
   installed, add the option '--swig' and recompile the source code:
   $ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux --swig

Unittests are executed, libraries and executables are assembled under
scons-out/opt-linux/.


== Install ==

Files will be installed under /usr/local/ and under /usr/lib/python2.x/site-packages

1- Log as root:
   $ sudo -s'
   $ cd cpp/src
   $ export SCONS_DIR="`pwd`/tools/scons/scons-local-1.2.0.d20090223/"
3- For installing the C++ components only, run:
   $ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux install

   Or for also installing the Python module, run instead:
   $ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux --swig install
4- Cleanup the build and removes installed files by appending the '-c' option to
   your previous command
   $ /<absolute_path>/cpp/src/tools/swtoolkit/hammer.sh --mode=opt-linux --swig install -c

Read the tutorial and the examples under src/examples/ and consults
/usr/local/include/keyczar it contains all the header files of the library.


== Source tree ==

src/
  base/             -> Third party code mostly derived from Chromium
  example/          -> Few examples to use when Keyczar is installed
  keyczar/          -> Keyczar C++ implementation
  scons-out/        -> Build
  testing/          -> Testing framework (gtest)
  tools/            -> Building tools SCons and swtoolkit
  main.scons        -> Entry script


== Current limitations ==

- This implementation has only been compiled and tested under Linux. The
  components and tools used should be compatible with other platforms. However,
  there is a lot of work to do, especially using OpenSSL on Windows doesnt seems
  the best choice. It would rather be more judicious to use the MS CryptoAPI by
  adding to this code a new concrete crypto implementation. In this perspective
  the current code is able (at least in theory) to support easily different
  crypto implementations.
- Poor install mechanism and poor Swig support.
- Numerous unittests are implemented but keyczart is not currently extensively
  tested.


== Compliance with specifications ==

- This code follows Keyczar specifications http://code.google.com/p/keyczar/w/
- Added a new attribute 'nextKeyVersionNumber' in the metadata to keep the
  count of the next key version number to use when a new key is generated. Key
  sets without this attribute are fully supported and are updated transparently
  with this attribute. Exported public keys are emitted without this field (this
  is indeed useless for them).


== This implementation relies on those projects ==

- C++ Style Guide: http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml
- Chromium: http://src.chromium.org/viewvc/chrome/branches/chrome_official_branch/src/base/
- Dtoa: http://www.netlib.org/fp/
- gtest: http://code.google.com/p/googletest/
- Keyczar: http://code.google.com/p/keyczar/
- OpenSSL: http://www.openssl.org/docs/crypto/crypto.html
- SCons: http://www.scons.org/
- Stringencoders: http://code.google.com/p/stringencoders/
- Swig: http://www.swig.org/
- Swtoolkit: http://code.google.com/p/swtoolkit/


Credit to all the authors of those projects and to the originals authors of
Keyczar.

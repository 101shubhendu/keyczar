= C++ implementation =


== Dependancies ==

- OpenSSL: package libssl-dev (Debian/Ubuntu)
- Unicode icu: package libicu-dev
- [Optional packages]: python and swig


== Local build ==

Currently this implementation only works under Linux, install the required
packages and compile it:

 $ cd cpp/src && ./tools/swtoolkit/hammer.sh --mode=opt-linux --compat

Please read the 'Note' in the next section.

Libraries and executables are assembled under scons-out/opt-linux/.


== Install ==

Files will be installed under /usr/local/ and under /usr/lib/python2.x/site-packages

1- Log as root and execute these commands to install the C++ library:

  $ cd cpp/src && ./tools/swtoolkit/hammer.sh --mode=opt-linux --compat install

/!\ Note: it is actually recommanded to only use the compatibility (--compat)
mode which provides full compatibility with previous versions and others
implementations. The 'normal' mode is in development and future changes will
probably break compatibility with it.

For details on how to use this library, read the tutorial and the examples located
under src/examples/ and also consult the header files /usr/local/include/keyczar.


== Options ==

install    -> install the C++ library and/or the Python binding
-c         -> clean up the build and/or remove installed files
--swig     -> compile the Python binding (requires Swig to be installed)
--compat   -> ensure compatibility with Keyczar 0.6b specifications (see below)
-jX        -> compile on X threads
--mode=XX  -> where XX can be opt-linux or dbg-linux, dbg-linux enables debug
              mode and opt-linux stands for optimized-linux.


== Current limitations ==

- This implementation only works under Linux with OpenSSL. The components and
  tools used should be multi-plateform but it hasn't been tested and it would
  likely require a lot of work if another cryptography library had to be used.
- Poor install mechanism.


== Adherence to specifications ==

- When compiled with option --compat this implementation is entirely compatible
  with Keyczar 0.6b (see detailed specifications at
  http://code.google.com/p/keyczar/w/).
- When compiled without this option this implementation use cryptographic
  algorithms defined in algorithms.txt and use a new attribute
  'nextKeyVersionNumber' in order to keep the next key version number to assign
  to new key.


== Source tree ==

src/
  base/             -> Third party code mostly derived from Chromium
  example/          -> Few examples to use when Keyczar is installed
  keyczar/          -> Keyczar C++ implementation
  scons-out/        -> Build
  testing/          -> Testing framework (gtest)
  tools/            -> Building tools SCons and swtoolkit
  main.scons        -> Entry script


== This implementation relies on those projects ==

- C++ Style Guide: http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml
- Chromium: http://src.chromium.org/viewvc/chrome/branches/chrome_official_branch/src/base/
- Dtoa: http://www.netlib.org/fp/
- gtest: http://code.google.com/p/googletest/
- Keyczar: http://code.google.com/p/keyczar/
- OpenSSL: http://www.openssl.org/docs/crypto/crypto.html
- SCons: http://www.scons.org/
- Stringencoders: http://code.google.com/p/stringencoders/
- Swig: http://www.swig.org/
- Swtoolkit: http://code.google.com/p/swtoolkit/


Credit to all the authors of those projects and to the originals authors of
Keyczar.
